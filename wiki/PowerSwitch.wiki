== Introduction: ==
I would like to be able to turn on/off PC by just switching on/off the button on power extension cord with switch:

http://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Socket_5.jpg/640px-Socket_5.jpg

Turning on is simple - just switch on the power extension switch ! 

The issue is with turning off - all PCs needs some time to shut down properly 
This idea is similar to the way how UPS communicates with PC in case of power failure.

== General concept: ==
 * arduino will be used as central unit
 * arduino will control the relay module which will power PC
 * arduino will be connected to mains by power adapter and to PC with USB
 * power cord switch will switch on/off the arduino power adapter and not the PC
 *  arduino will auto-select the power source between power adapter and USB

== How does it work ? ==
=== Turning PC on: ===
 * switch on arduino's power adapter
 * arduino starts and by default sets relay in ON mode and PC boots up

=== Turning PC off (this is tricky part): ===
 * switch off arduino's adapter using button on extension cord
 * arduino switches itself to USB power source using built into board auto-select functionality
 * arduino "senses" that power adaptor is switched off
 * arduino sends message over USB to PC ordering PC to enter shut down sequence
 * arduino goes into sleep for the time needed for PC to shut down
 * arduino wakes up (at this point PC is already down)
 * arduino sets relay to OFF mode

== Modules: ==
There are 3 elements which had to be implemented:
 * software:
  * listener on PC to intercept the shut down message from arduino
  * software running on micro controller to monitor current power source
 * hardware:
  * device to monitor power source for arduino
  * relay to drive power for PC
  * led to show current status of the power switch and PC

== Software implementation details: ==

=== PC listener ===
This is code running on PC which is responsible for listening on the shut down message from arduino.
This code is written in Python and is based on infinitive loop which listens on data from serial.
Code was tested on Debian Squeezy.

=== Linux init scripts ===
This script is responsible for setting up, initiating and controlling arduino from PC at star up and shut down of the system.
Code was tested on Debian Squeezy.

=== Arduino code ===
This code is responsible for controlling LED and relay.

== Hardware implementation details: ==
Hardware is based on Arudino Uno:
http://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/UnoConnections.jpg/640px-UnoConnections.jpg

=== Power source monitor ===
2 resistors connected between VCC/GND/A0 to intercept the switching off of power adaptor.
Arduino has built in functionalit to switching between power adaptor and USB.

=== Relay ===
Relay module.

=== LED ===
RGB LED connected to the board over 3 few resistors.

== Images == 

Photos:

Arduino - central unit - box closed - front:

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/main.box.front.2.jpg

Arduino - central unit - box closed - back:

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/main.box.back.2.jpg

Arduino - central unit - box open - front:

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/main.open.front.JPG

Arduino - central unit - box open - back:

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/main.open.back.2.jpg

Arduino - central unit - box open - main board:

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/main.board.board.JPG

Arduino - central unit - box open - interfaces board:

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/main.board.interface.JPG

Arduino - relay unit - box closed:

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/relay.box.front.jpg

Arduino - relay unit - box open (close-up):

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/relay.open.close.JPG

Arduino - relay unit - box open (from distance - with connectors):

https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/photos/relay.open.distance.JPG

Schematics:
https://mpd-lirc.googlecode.com/svn/power-switch/wiki/images/schematics/schematics-web_size.jpg
(above image was created with Fritzing - fritzing.org)

Elements list:
 * Arduino1 - Arduino - processor ATmega; variant Arduino UNO R3
 * C1 - Electrolytic Capacitor - package 100 mil [THT, electrolytic]; capacitance 10µF; voltage 6.3V
 * J1 - Screw terminal - 3 pins - package THT; hole size 1.0mm,0.508mm; pins 3; pin spacing 0.137in (3.5mm)
 * K1 - Relay - package THT; contact rating 125VAC / 30VDC @ 1 AMP; voltage 5V; switching circuit SPDT; part # FRS1B-S
 * LED1 - RGB LED (com. cathode, rgb) - package 5 mm [THT]; pin order rgb; polarity common cathode; rgb RGB
 * R3 - 220 Ω Resistor - package THT; tolerance ±5%; bands 4; resistance 220Ω; pin spacing 400 mil
 * R6 - 220 Ω Resistor - package THT; tolerance ±5%; bands 4; resistance 220Ω; pin spacing 400 mil
 * R7 - 220 Ω Resistor - package THT; tolerance ±5%; bands 4; resistance 220Ω; pin spacing 400 mil
 * R8 - 20k Ω Resistor - package THT; tolerance ±5%; bands 4; resistance 20kΩ; pin spacing 400 mil
 * R9 - 10k Ω Resistor - package THT; tolerance ±5%; bands 4; resistance 10kΩ; pin spacing 400 mil

== Source code: ==
 * arduino: https://mpd-lirc.googlecode.com/svn/power-switch/trunk/arduino
 * server: https://mpd-lirc.googlecode.com/svn/power-switch/trunk/server

== Libraries used in the project ==
 * https://github.com/dreamcat4/CmdMessenger
 * https://github.com/JChristensen/Timer
 * http://arduino.cc/en/Reference/LiquidCrystal

== Links ==
 * http://arduino.cc/forum/index.php?topic=134390.0 - initial discussion about approach to the problem
 * http://arduino.cc/forum/index.php?PHPSESSID=d748e197470782883febd919a95efbcf&topic=107860.msg809962#msg809962 - voltage divider
 * http://playground.arduino.cc/Interfacing/LinuxTTY - configuration of serial port under linux for communication with Arduino
 * http://playground.arduino.cc/Main/DisablingAutoResetOnSerialConnection - disabling auto-reset in Arduino